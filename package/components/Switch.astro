---
export interface Props {
    name?: string;
    default?: string;
    key?: string;
    obj?: Record<string, any>;
}

const {
    name,
    default: _default='default',
    key,
    obj
} = Astro.props as Props


let html;
if (!name) {
    html = await Astro.slots.render('default');
    const slots = Object.keys(Astro.slots)
        .filter(i => Number.isInteger(+i))
        .sort((a, b) => +a - +b)
    for (let slot of slots) {
        let _html = await Astro.slots.render(slot)
        if (_html) {
            html = _html
            break
        }
    }
}
---


{() => {
    return !name
        ? <Fragment set:html={html}/>
        : Astro.slots.has(name)
            ? obj && (obj[name] || obj[key])
                ? <Fragment set:html={Astro.slots.render(name, [obj[name] || obj[key]])}/>
                : <Fragment set:html={Astro.slots.render(name)}/>
            : obj && obj[key]
                ? <Fragment set:html={Astro.slots.render(_default, [obj[key]])}/>
                : <Fragment set:html={Astro.slots.render(_default)}/>
}}