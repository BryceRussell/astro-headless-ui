---
export interface Props {
    name?: string;
    default?: string;
    arg?: string;
    args?: Record<string, any>;
}

const {
    name,
    default: _default='default',
    arg=_default,
    args
} = Astro.props as Props

let html: string;
let isDefault: boolean;

if (!name) {
    for (let slot in Astro.slots) {
        html = await Astro.slots.render(slot)
        if (html) break
    }
}
else if (Astro.slots.has(name)) html = await Astro.slots.render(name)

if (!html) {
    html = await Astro.slots.render(_default)
    isDefault = true
}
---


{() => {
    if (!name) return <Fragment set:html={html}/>
    return isDefault
        ? args && args[arg]
            ? <Fragment set:html={Astro.slots.render(_default, [args[arg]])}/>
            : <Fragment set:html={Astro.slots.render(_default)}/>
        : args && (args[name] || args[arg])
            ? <Fragment set:html={Astro.slots.render(name, [args[name] || args[arg]])}/>
            : <Fragment set:html={Astro.slots.render(name)}/>
}}