---
import type { HTMLAttributes } from 'astro/types';
import { hashId } from '../util';

export interface Props extends HTMLAttributes<'button'> {
    selector?: string;
    active?: string;
    duration?: number;
    padding?: string;
    paddingX?: string;
    paddingY?: string;
    template?: string;
}

const {
    selector='pre',
    active='copied',
    duration=2000,
    padding='.5rem',
    paddingX=padding,
    paddingY=padding,
    template=hashId(selector),
    ..._attrs
} = Astro.props

const attrs = {
    style: `position:absolute;top:${paddingY};right:${paddingX};`,
    'aria-label': 'Copy code',
    ..._attrs
}
---

<template id={template}>
    <button {...attrs}>
        <slot />
    </button>
</template>


<script define:vars={{
    selector,
    template,
    active,
    duration
}}>
    const copy = document.querySelector('#'+template).content.children[0]

    function deepCloneCopy(i) {
        let _copy = copy.cloneNode(true)
        i > 0 && _copy.querySelectorAll('style').forEach(style => style.remove())
        _copy.addEventListener("click", e => {
            const target = e.currentTarget
            let code = target.previousSibling.innerText;
            if (!code) return
            navigator.clipboard.writeText(code);
		    target.classList.add(active);
            if (target._timerId) clearTimeout(target._timerId)
            target._timerId = setTimeout(() => target.classList.remove(active), duration);
        })
        return _copy
    }

    document.querySelectorAll(selector).forEach((e, i) => {
        const wrapper = document.createElement("div")
        wrapper.style.position = 'relative'
        e.parentNode.insertBefore(wrapper, e.nextSibling)
        wrapper.append(e)
        wrapper.append(deepCloneCopy(i))
    });
</script>