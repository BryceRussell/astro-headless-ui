---
export interface Props {
    data: any[];
    size?: string | number;
    page: string | number;
}

const {
    data=[],
    size=10,
    page=1
} = Astro.props

const last = Math.max(1, Math.ceil(data.length / +size));

const pages = [...Array(last).keys()].map((n) => {
        const num = n + 1;
        const start = +size === Infinity ? 0 : (num - 1) * +size;
        const end = Math.min(start + +size, data.length);
        return {
            data: data.slice(start, end),
            start,
            end: end-1,
            size,
            total: data.length,
            current: num?num:undefined,
            last,
        }
})
---
{_ => {
    if (!Number.isInteger(+page) || page > last) return <Fragment set:html={Astro.slots.render('error', [pages.pop()])}/>
    if (Astro.slots.has(''+page)) return <Fragment set:html={Astro.slots.render(''+page, [pages[+page - 1]])}/>
    return <Fragment set:html={Astro.slots.render('default', [pages[+page - 1]])}/>
}}